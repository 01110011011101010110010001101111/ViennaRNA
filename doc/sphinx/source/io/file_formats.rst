File Formats
============

Here, we give an overview of the file formats compatible with our library


Multiple Sequence Alignments (MSA)
----------------------------------

ClustalW format
^^^^^^^^^^^^^^^

The *ClustalW* format is a relatively simple text file containing a single
multiple sequence alignment of DNA, RNA, or protein sequences. It was first used
as an output format for the @em clustalw programs, but nowadays it may also be
generated by various other sequence alignment tools. The specification is straight
forward:

* The first line starts with the words::

    CLUSTAL W

  or::

    CLUSTALW

* After the above header there is at least one empty line
* Finally, one or more blocks of sequence data are following, where each
  block is separated by at least one empty line.

Each line in a blocks of sequence data consists of the sequence name followed by
the sequence symbols, separated by at least one whitespace character. Usually,
the length of a sequence in one block does not exceed 60 symbols. Optionally,
an additional whitespace separated cumulative residue count may follow the sequence
symbols. Optionally, a block may be followed by a line depicting the degree of
conservation of the respective alignment columns.

.. note::

  Sequence names and the sequences must not contain whitespace characters!
  Allowed gap symbols are the hyphen (``-``), and dot (``.``).

.. warning::

  Please note that many programs that output this format tend to truncate
  the sequence names to a limited number of characters, for instance the
  first 15 characters. This can destroy the uniqueness of identifiers in
  your MSA.

Here is an example alignment in ClustalW format:

.. include:: ../../../../examples/files/alignment_clustal.aln
   :literal:


Stockholm 1.0 format
^^^^^^^^^^^^^^^^^^^^

Here is an example alignment in Stockholm 1.0 format:

.. include:: ../../../../examples/files/alignment_stockholm.stk
   :literal:


.. admonition:: See also...

  :ref:`io/rna_structure_notations:wuss notation` for legal characters and
  their interpretation in the consensus secondary structure line ``SS_cons``.


FASTA (Pearson) format
^^^^^^^^^^^^^^^^^^^^^^

.. note::

  Sequence names must not contain whitespace characters. Otherwise, the parts after
  the first whitespace will be dropped. The only allowed gap character is the hyphen
  (``-``).

Here is an example alignment in FASTA format:

.. include:: ../../../../examples/files/alignment_fasta.fa
   :literal:


MAF format
^^^^^^^^^^

The multiple alignment format (MAF) is usually used to store multiple alignments on DNA level
between entire genomes. It consists of independent blocks of aligned sequences which are
annotated by their genomic location. Consequently, an MAF formatted MSA file may contain
multiple records. MAF files start with a line::

  ##maf

which is optionally extended by whitespace delimited key=value pairs. Lines starting with
the character (``#``) are considered comments and usually ignored.

A MAF block starts with character (``a``) at the beginning of a line, optionally followed
by whitespace delimited ``key=value`` pairs. The next lines start with character (``s`) and
contain sequence information of the form::

  s src start size strand srcSize sequence

where:

* *src* is the name of the sequence source
* *start* is the start of the aligned region within the source (0-based)
* *size* is the length of the aligned region without gap characters
* *strand* is either (``+``) or (``-``), depicting the location of the aligned
  region relative to the source
* *srcSize* is the size of the entire sequence source, e.g. the full chromosome
* *sequence* is the aligned sequence including gaps depicted by the hyphen (``-``)

Here is an example alignment in MAF format (bluntly taken from the
`UCSC Genome browser website <https://genome.ucsc.edu/FAQ/FAQformat.html#format5>`_):

.. include:: ../../../../examples/files/alignment_maf.maf
   :literal:

MSA API
^^^^^^^

Functions to read/write multiple sequence alignments (MSA) in various file formats.

.. doxygengroup:: file_formats_msa
    :no-title:


Command Files
-------------

The RNAlib and many programs of the ViennaRNA Package can parse and apply data from
so-called *command files*. These commands may refer to structure constraints or even
extensions of the RNA folding grammar (such as :ref:`grammar:unstructured domains`).

Commands are given as a line of whitespace delimited data fields. The syntax we use
extends the constraint definitions used in the `mfold <http://mfold.rna.albany.edu/?q=mfold>`_
or `UNAfold <http://mfold.rna.albany.edu/?q=DINAMelt/software>`_ software, where
each line begins with a command character followed by a set of positions.

However, we introduce several new commands, and allow for an optional loop type context
specifier in form of a sequence of characters, and an orientation flag that enables one
to force a nucleotide to pair upstream, or downstream.

Constraint commands
^^^^^^^^^^^^^^^^^^^

The following set of commands is recognized:

* ``F`` ... Force
* ``P`` ... Prohibit
* ``C`` ... Conflicts/Context dependency
* ``A`` ... Allow (for non-canonical pairs)
* ``E`` ... Soft constraints for unpaired position(s), or base pair(s)

RNA folding grammar exensions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ``UD`` ... Add ligand binding using the :ref:`grammar:unstructured domains` feature

Specification of the loop type context
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The optional loop type context specifier ``[LOOP]`` may be a combination of the following:

* ``E`` ... Exterior loop
* ``H`` ... Hairpin loop
* ``I`` ... Internal/Interior loop
* ``M`` ... Multibranch loop
* ``A`` ... All loops

For structure constraints, we additionally allow one to address base pairs enclosed
by a particular kind of loop, which results in the specifier ``[WHERE]`` which consists
of ``[LOOP]`` plus the following character:

* ``i`` ... enclosed pair of an Interior loop
* ``m`` ... enclosed pair of a Multibranch loop

If no ``[LOOP]`` or ``[WHERE]`` flags are set, all contexts are considered
(equivalent to ``A`` ).

Controlling the orientation of base pairing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For particular nucleotides that are forced to pair, the following ``[ORIENTATION]`` flags
may be used:

* ``U`` ... Upstream
* ``D`` ... Downstream

If no ``[ORIENTATION]`` flag is set, both directions are considered.

Sequence coordinates
^^^^^^^^^^^^^^^^^^^^

Sequence positions of nucleotides/base pairs are 1-based and consist of three
positions :math:`i`, :math:`j`, and :math:`k`. Alternativly, four positions may
be provided as a pair of two position ranges :math:`[i:j]`, and :math:`[k:l]`
using the ``-`` sign as delimiter within each range, i.e. ``i-j``, and ``k-l``.

Valid constraint commands
^^^^^^^^^^^^^^^^^^^^^^^^^

Below are resulting general cases that are considered *valid* constraints:

* **"Forcing a range of nucleotide positions to be paired"**::

    F i 0 k [WHERE] [ORIENTATION]

  Description:

  Enforces the set of :math:`k` consecutive nucleotides starting at
  position :math:`i` to be paired. The optional loop type specifier ``[WHERE]``
  allows to force them to appear as closing/enclosed pairs of certain types of
  loops.

* **"Forcing a set of consecutive base pairs to form"**:::

    F i j k [WHERE]

  Description:

  Enforces the base pairs :math:`(i,j), \ldots, (i+(k-1), j-(k-1))` to form.
  The optional loop type specifier ``[WHERE]`` allows to specify in which loop
  context the base pair must appear.

* **"Prohibiting a range of nucleotide positions to be paired"**::

    P i 0 k [WHERE]

  Description:

  Prohibit a set of :math:`k` consecutive nucleotides to participate
  in base pairing, i.e. make these positions unpaired. The optional loop type
  specifier ``[WHERE]`` allows to force the nucleotides to appear within the
  loop of specific types.

* **"Probibiting a set of consecutive base pairs to form"**::

      P i j k [WHERE]

  Description:

  Probibit the base pairs :math:`(i,j), \ldots, (i+(k-1), j-(k-1))` to form.
  The optional loop type specifier ``[WHERE]`` allows to specify the type of
  loop they are disallowed to be the closing or an enclosed pair of.

* **"Prohibiting two ranges of nucleotides to pair with each other"**::

      P i-j k-l [WHERE]

  Description:

  Prohibit any nucleotide :math:`p \in [i:j]` to pair with any other nucleotide
  :math:`q \in [k:l]`. The optional loop type specifier ``[WHERE]`` allows to
  specify the type of loop they are disallowed to be the closing or an enclosed pair of.

* **"Enforce a loop context for a range of nucleotide positions"**::

      C i 0 k [WHERE]

  Description:

  This command enforces nucleotides to be unpaired similar to @em prohibiting nucleotides to be paired,
  as described above. It too marks the corresponding nucleotides to be unpaired, however,
  the ``[WHERE]`` flag can be used to enforce specfic loop types the nucleotides must appear in.

* **"Remove pairs that conflict with a set of consecutive base pairs"**::

    C i j k

  Description:

  Remove all base pairs that conflict with a set of consecutive base pairs
  :math:`(i,j), \ldots, (i+(k-1), j-(k-1))`. Two base pairs :math:`(i,j)` and
  :math:`(p,q)` conflict with each other if :math:`i < p < j < q`, or
  :math:`p < i < q < j`.

* **"Allow a set of consecutive (non-canonical) base pairs to form"**::

    A i j k [WHERE]

  Description:

  This command enables the formation of the consecutive base pairs
  :math:`(i,j), \ldots, (i+(k-1), j-(k-1))`, no matter if they are *canonical*,
  or *non-canonical*. In contrast to the above ``F`` and ``W`` commands, which remove
  conflicting base pairs, the ``A`` command does not. Therefore, it may be used to
  allow @em non-canoncial base pair interactions. Since the RNAlib does not contain
  free energy contributions :math:`E_{ij}` for non-canonical base pairs :math:`(i,j)`,
  they are scored as the @em maximum of similar, known contributions. In terms of a
  *Nussinov* like scoring function the free energy of non-canonical base pairs is
  therefore estimated as

  .. math::

    E_{ij} = \min \left[  \max_{(i,k) \in \{GC, CG, AU, UA, GU, UG\}} E_{ik}, \max_{(k,j) \in \{GC, CG, AU, UA, GU, UG\}} E_{kj} \right].

  The optional loop type specifier ``[WHERE]`` allows to specify in which loop
  context the base pair may appear.

* **"Apply pseudo free energy to a range of unpaired nucleotide positions"**::

    E i 0 k e

  Description:

  Use this command to apply a pseudo free energy of :math:`e` to the set of :math:`k`
  consecutive nucleotides, starting at position :math:`i`. The pseudo free energy is
  applied only if these nucleotides are considered unpaired in the recursions, or
  evaluations, and is expected to be given in units of :math:`\text{kcal} \cdot \text{mol}^{-1}`.

* **"Apply pseudo free energy to a set of consecutive base pairs"**::

    E i j k e

  Description:

  Use this command to apply a pseudo free energy of @f$ e @f$ to the set of base pairs
  :math:`(i,j), \ldots, (i+(k-1), j-(k-1))`. Energies are expected to be given in
  units of :math:`\text{kcal} \cdot \text{mol}^{-1}`.


Valid domain extensions commands
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* **"Add ligand binding to unpaired motif (a.k.a. unstructured domains)"**::

    UD m e [LOOP]

  Description:

  Add ligand binding to unpaired sequence motif :math:`m` (given in IUPAC format,
  capital letters) with binding energy :math:`e` in particular loop type(s).

  Example::

    UD  AAA   -5.0    A

  The above example applies a binding free energy of :math:`-5\,\text{kcal} \cdot \text{mol}^{-1}`
  for a motif ``AAA`` that may be present in all loop types.


Energy Parameters
-----------------

Modified Bases
^^^^^^^^^^^^^^

The functions :c:func:`vrna_sc_mod()`, :c:func:`vrna_sc_mod_json()` and alike
implement an energy correction framework to account for modified bases in the
secondary structure predictions. To supply these functions with the energy
parameters and general specifications of the base modification, the following
``JSON`` data format may be used:

JSON data must consist of a header section ``modified_bases`` This header
is an object with the mandatory keys:

* ``name`` specifying a name of the modified base
* ``unmodified` that consists of a single upper-case letter of the unmodified
  version of this base,
* the ``one_letter_code`` key to specify which letter is used for the modified
  bases in the subsequent energy parameters, and
* an array of `pairing_partners``

The latter must be uppercase characters. An optional ``sources`` key may contain
an array of related publications, e.g. those the parameters have been derived from.

Next to the header may follow additional keys to specify the actual energy
contributions of the modified base in various loop contexts. All energy
contributions must be specified in free energies :math:`\Delta G` in units of
:math:`\text{kcal} \cdot \text{mol}^{-1}`. To allow for rescaling of the free
energies at temperatures that differ from the default (:math:`37^\circ C`),
enthalpy parameters :math:`\Delta H` may be specified as well. Those, however
are optional. The keys for free energy (at :math:`37^\circ C`) and enthalpy
parameters have the suffixes ``_energies`` and ``_enthalpies``, respectively.

The parser and underlying framework currently supports the following
loop contexts:

* **base pair stacks** (via the ``stacking`` key prefix).

  This key must point to an object with one key value pair for each
  stacking interaction data is provided for. Here, the key consists
  of four upper-case characters denoting the interacting bases, where
  the the first two represent one strand in 5' to 3' direction and the
  last two the opposite strand in 3' to 5' direction. The values
  are energies in :math:`kcal \cdot mol^{-1}`.
* **terminal mismatches** (via the ``mismatch`` key prefix).

  This key points to an object with key value pairs for each mismatch
  energy parameter that is available. Keys are 4 characters long
  nucleotide one-letter codes as used in base pair stacks above.
  The second and fourth character denote the two unpaired mismatching
  bases, while the other two represent the closing base pair.

* **dangling ends** (via the ``dangle5`` and ``dangle3`` key prefixes).

  The object behind these keys, again, consists of key value pairs
  for each dangling end energy parameter. Keys are 3 characters long
  where the first two represent the two nucleotides that form the
  base pair, and the third is the unpaired base that either stacks
  on the 3' or 5' end of the enclosed part of the base pair.

* **terminal pairs** (via the ``terminal`` key prefix).

  Terminal base pairs, such as AU or GU, sometimes receive an
  additional energy penalty. The object behind this key may
  list energy parameters to apply whenever particular base
  pairs occur at the end of a helix. Each of those parameters
  is specified as key value pair, where the key consists of
  two upper-case characters denoting the terminal base pair.

Below is a JSON template specifying most of the possible input
parameters. Actual energy parameter files can be found in the
source code tarball within the ``misc/`` subdirectory.

.. literalinclude:: ../../../../misc/rna_mod_template_parameters.json
   :language: json

An actual example of real-world data may look like

.. literalinclude:: ../../../../misc/rna_mod_pseudouridine_parameters.json
   :language: json


Other file formats
------------------

Functions to read/write different file formats for nucleic acid sequences
and secondary structures.

File formats API
^^^^^^^^^^^^^^^^

.. doxygengroup:: file_formats
    :no-title:
