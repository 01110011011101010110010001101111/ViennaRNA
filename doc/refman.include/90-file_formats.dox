/**
  @page file_formats  Input / Output File Formats

  @section      msa-formats   File formats for Multiple Sequence Alignments (MSA)

  @subsection   msa-formats-clustal   ClustalW format

  The @em ClustalW format is a relatively simple text file containing a single
  multiple sequence alignment of DNA, RNA, or protein sequences. It was first used
  as an output format for the @em clustalw programs, but nowadays it may also be
  generated by various other sequence alignment tools. The specification is straight
  forward:

  - The first line starts with the words @verbatim CLUSTAL W @endverbatim or
    @verbatim CLUSTALW @endverbatim
  - After the above header there is at least one empty line
  - Finally, one or more blocks of sequence data are following, where each
    block is separated by at least one empty line
  .
  Each line in a blocks of sequence data consists of the sequence name followed by
  the sequence symbols, separated by at least one whitespace character. Usually,
  the length of a sequence in one block does not exceed 60 symbols. Optionally,
  an additional whitespace separated cumulative residue count may follow the sequence
  symbols. Optionally, a block may be followed by a line depicting the degree of
  conservation of the respective alignment columns.

  @note Sequence names and the sequences must not contain whitespace characters!
        Allowed gap symbols are the hyphen @em ("-"), and dot @em (".").

  @warning  Please note that many programs that output this format tend to truncate
            the sequence names to a limited number of characters, for instance the
            first 15 characters. This can destroy the uniqueness of identifiers in
            your MSA.

  Here is an example alignment in ClustalW format:
  @verbatim
CLUSTAL W (1.83) multiple sequence alignment


AL031296.1/85969-86120      CUGCCUCACAACGUUUGUGCCUCAGUUACCCGUAGAUGUAGUGAGGGUAACAAUACUUAC
AANU01225121.1/438-603      CUGCCUCACAACAUUUGUGCCUCAGUUACUCAUAGAUGUAGUGAGGGUGACAAUACUUAC
AAWR02037329.1/29294-29150  ---CUCGACACCACU---GCCUCGGUUACCCAUCGGUGCAGUGCGGGUAGUAGUACCAAU

AL031296.1/85969-86120      UCUCGUUGGUGAUAAGGAACAGCU
AANU01225121.1/438-603      UCUCGUUGGUGAUAAGGAACAGCU
AAWR02037329.1/29294-29150  GCUAAUUAGUUGUGAGGACCAACU 
  @endverbatim
  
  @subsection   msa-formats-stockholm Stockholm 1.0 format

  Here is an example alignment in Stockholm 1.0 format:
  @verbatim
# STOCKHOLM 1.0

#=GF AC   RF01293
#=GF ID   ACA59
#=GF DE   Small nucleolar RNA ACA59
#=GF AU   Wilkinson A
#=GF SE   Predicted; WAR; Wilkinson A
#=GF SS   Predicted; WAR; Wilkinson A
#=GF GA   43.00
#=GF TC   44.90
#=GF NC   40.30
#=GF TP   Gene; snRNA; snoRNA; HACA-box;
#=GF BM   cmbuild -F CM SEED
#=GF CB   cmcalibrate --mpi CM
#=GF SM   cmsearch --cpu 4 --verbose --nohmmonly -E 1000 -Z 549862.597050 CM SEQDB
#=GF DR   snoRNABase; ACA59;
#=GF DR   SO; 0001263; ncRNA_gene;
#=GF DR   GO; 0006396; RNA processing;
#=GF DR   GO; 0005730; nucleolus;
#=GF RN   [1]
#=GF RM   15199136
#=GF RT   Human box H/ACA pseudouridylation guide RNA machinery.
#=GF RA   Kiss AM, Jady BE, Bertrand E, Kiss T
#=GF RL   Mol Cell Biol. 2004;24:5797-5807.
#=GF WK   Small_nucleolar_RNA
#=GF SQ   3


AL031296.1/85969-86120     CUGCCUCACAACGUUUGUGCCUCAGUUACCCGUAGAUGUAGUGAGGGUAACAAUACUUACUCUCGUUGGUGAUAAGGAACAGCU
AANU01225121.1/438-603     CUGCCUCACAACAUUUGUGCCUCAGUUACUCAUAGAUGUAGUGAGGGUGACAAUACUUACUCUCGUUGGUGAUAAGGAACAGCU
AAWR02037329.1/29294-29150 ---CUCGACACCACU---GCCUCGGUUACCCAUCGGUGCAGUGCGGGUAGUAGUACCAAUGCUAAUUAGUUGUGAGGACCAACU
#=GC SS_cons               -----((((,<<<<<<<<<___________>>>>>>>>>,,,,<<<<<<<______>>>>>>>,,,,,))))::::::::::::
#=GC RF                    CUGCcccaCAaCacuuguGCCUCaGUUACcCauagguGuAGUGaGgGuggcAaUACccaCcCucgUUgGuggUaAGGAaCAgCU
//
  @endverbatim

  @subsection   msa-formats-fasta     FASTA (Pearson) format

  @note Sequence names must not contain whitespace characters. Otherwise, the parts after
        the first whitespace will be dropped. The only allowed gap character is the hyphen
        @em ("-").

  Here is an example alignment in FASTA format:
  @verbatim
>AL031296.1/85969-86120
CUGCCUCACAACGUUUGUGCCUCAGUUACCCGUAGAUGUAGUGAGGGUAACAAUACUUAC
UCUCGUUGGUGAUAAGGAACAGCU
>AANU01225121.1/438-603
CUGCCUCACAACAUUUGUGCCUCAGUUACUCAUAGAUGUAGUGAGGGUGACAAUACUUAC
UCUCGUUGGUGAUAAGGAACAGCU
>AAWR02037329.1/29294-29150
---CUCGACACCACU---GCCUCGGUUACCCAUCGGUGCAGUGCGGGUAGUAGUACCAAU
GCUAAUUAGUUGUGAGGACCAACU
  @endverbatim

  @section     constraint-formats  File formats for Secondary Structure Constraints
  @subsection  constraint-formats-file Constraints Definition File

  The RNAlib can parse and apply data from constraint definition text files, where each constraint
  is given as a line of whitespace delimited commands. The syntax we use extends the one used in
  <a href="http://mfold.rna.albany.edu/?q=mfold">mfold</a> /
  <a href="http://mfold.rna.albany.edu/?q=DINAMelt/software">UNAfold</a> where
  each line begins with a command character followed by a set of positions.\n
  Additionally, we introduce several new commands, and allow for an optional loop type context
  specifier in form of a sequence of characters, and an orientation flag that enables one to force
  a nucleotide to pair upstream, or downstream.

  @subsubsection  const_file_commands Constraint commands
  The following set of commands is recognized:
  -  @p F @f$ \ldots @f$ Force
  -  @p P @f$ \ldots @f$ Prohibit
  -  @p C @f$ \ldots @f$ Conflicts/Context dependency
  -  @p A @f$ \ldots @f$ Allow (for non-canonical pairs)
  -  @p E @f$ \ldots @f$ Soft constraints for unpaired position(s), or base pair(s)

  @subsubsection  const_file_loop_types Specification of the loop type context
  The optional loop type context specifier @p [WHERE] may be a combination of the following:
  -  @p E @f$ \ldots @f$ Exterior loop
  -  @p H @f$ \ldots @f$ Hairpin loop
  -  @p I @f$ \ldots @f$ Interior loop (enclosing pair)
  -  @p i @f$ \ldots @f$ Interior loop (enclosed pair)
  -  @p M @f$ \ldots @f$ Multibranch loop (enclosing pair)
  -  @p m @f$ \ldots @f$ Multibranch loop (enclosed pair)
  -  @p A @f$ \ldots @f$ All loops

  If no @p [WHERE] flags are set, all contexts are considered (equivalent to @p A )

  @subsubsection const_file_orientation Controlling the orientation of base pairing
  For particular nucleotides that are forced to pair, the following @p [ORIENTATION] flags
  may be used:
  -  @p U @f$ \ldots @f$ Upstream
  -  @p D @f$ \ldots @f$ Downstream

  If no @p [ORIENTATION] flag is set, both directions are considered.

  @subsubsection const_file_seq_coords Sequence coordinates
  Sequence positions of nucleotides/base pairs are @f$ 1- @f$ based and consist of three
  positions @f$ i @f$, @f$ j @f$, and @f$ k @f$. Alternativly, four positions may be provided
  as a pair of two position ranges @f$ [i:j] @f$, and @f$ [k:l] @f$ using the '-' sign as
  delimiter within each range, i.e. @f$ i-j @f$, and @f$ k-l @f$.

  @subsubsection  const_file_syntax Valid constraint commands
  Below are resulting general cases that are considered @em valid constraints:

  -#  @b "Forcing a range of nucleotide positions to be paired":\n
      Syntax: @code F i 0 k [WHERE] [ORIENTATION] @endcode\n
      Description:\n
      Enforces the set of @f$ k @f$ consecutive nucleotides starting at
      position @f$ i @f$ to be paired. The optional loop type specifier @p [WHERE]
      allows to force them to appear as closing/enclosed pairs of certain types of loops.
  -#  @b "Forcing a set of consecutive base pairs to form":\n
      Syntax: @verbatim F i j k [WHERE] @endverbatim\n
      Description:\n
      Enforces the base pairs @f$ (i,j), \ldots, (i+(k-1), j-(k-1)) @f$ to form.
      The optional loop type specifier @p [WHERE] allows to specify in which loop
      context the base pair must appear.
  -#  @b "Prohibiting a range of nucleotide positions to be paired":\n
      Syntax: @verbatim P i 0 k [WHERE] @endverbatim\n
      Description:\n
      Prohibit a set of @f$ k @f$ consecutive nucleotides to participate
      in base pairing, i.e. make these positions unpaired. The optional loop type specifier
      @p [WHERE] allows to force the nucleotides to appear within the loop of
      specific types.
  -#  @b "Probibiting a set of consecutive base pairs to form":\n
      Syntax: @verbatim P i j k [WHERE] @endverbatim\n
      Description:\n
      Probibit the base pairs @f$ (i,j), \ldots, (i+(k-1), j-(k-1)) @f$ to form.
      The optional loop type specifier @p [WHERE] allows to specify the type of
      loop they are disallowed to be the closing or an enclosed pair of.
  -#  @b "Prohibiting two ranges of nucleotides to pair with each other":\n
      Syntax: @verbatim P i-j k-l [WHERE] @endverbatim
      Description:\n
      Prohibit any nucleotide @f$ p \in [i:j] @f$ to pair with any other nucleotide
      @f$ q \in [k:l] @f$. The optional loop type specifier @p [WHERE] allows to
      specify the type of loop they are disallowed to be the closing or an enclosed pair of.
  -#  @b "Enforce a loop context for a range of nucleotide positions":\n
      Syntax: @verbatim C i 0 k [WHERE] @endverbatim
      Description:\n
      This command enforces nucleotides to be unpaired similar to @em prohibiting nucleotides to be paired,
      as described above. It too marks the corresponding nucleotides to be unpaired, however,
      the @p [WHERE] flag can be used to enforce specfic loop types the nucleotides must appear in.
  -#  @b "Remove pairs that conflict with a set of consecutive base pairs":\n
      Syntax: @verbatim C i j k @endverbatim\n
      Description:\n
      Remove all base pairs that conflict with a set of consecutive base pairs
      @f$ (i,j), \ldots, (i+(k-1), j-(k-1)) @f$. Two base pairs @f$ (i,j) @f$ and @f$ (p,q) @f$
      conflict with each other if @f$ i < p < j < q @f$, or @f$ p < i < q < j @f$.
  -#  @b "Allow a set of consecutive (non-canonical) base pairs to form":\n
      Syntax: @code A i j k [WHERE] @endcode\n
      Description:\n
      This command enables the formation of the consecutive base pairs
      @f$ (i,j), \ldots, (i+(k-1), j-(k-1)) @f$, no matter if they are @em canonical, or
      @em non-canonical. In contrast to the above @p F and @p W commands, which remove
      conflicting base pairs, the @p A command does not. Therefore, it may be used to
      allow @em non-canoncial base pair interactions. Since the RNAlib does not contain
      free energy contributions @f$ E_{ij} @f$ for non-canonical base pairs @f$ (i,j) @f$,
      they are scored as the @em maximum of similar, known contributions. In terms of a
      @em Nussinov like scoring function the free energy of non-canonical base pairs is therefore
      estimated as
      @f[ E_{ij} = \min \left[  \max_{(i,k) \in \{GC, CG, AU, UA, GU, UG\}} E_{ik}, \max_{(k,j) \in \{GC, CG, AU, UA, GU, UG\}} E_{kj} \right]. @f]
      The optional loop type specifier @p [WHERE] allows to specify in which loop
      context the base pair may appear.
  -#  @b "Apply pseudo free energy to a range of unpaired nucleotide positions":\n
      Syntax: @code E i 0 k e @endcode\n
      Description:\n
      Use this command to apply a pseudo free energy of @f$ e @f$ to the set of @f$ k @f$
      consecutive nucleotides, starting at position @f$ i @f$. The pseudo free energy is
      applied only if these nucleotides are considered unpaired in the recursions, or evaluations,
      and is expected to be given in @f$ kcal / mol @f$.
  -#  @b "Apply pseudo free energy to a set of consecutive base pairs":\n
      Syntax @code E i j k e @endcode\n
      Use this command to apply a pseudo free energy of @f$ e @f$ to the set of base pairs
      @f$ (i,j), \ldots, (i+(k-1), j-(k-1)) @f$. Energies are expected to be given in
      @f$ kcal / mol @f$.

 */
