#!/usr/bin/env python
 
import os
import sys
from os.path import abspath, exists
import shutil

from distutils.sysconfig import get_python_lib
from distutils.core import setup, Extension

FILES_TO_BE_COPIED = ("__init__.py", "RNA_wrap.c")
 
def osx_clang_fix():
    """Add clang switch to ignore unused arguments to avoid OS X compile error.

    This is a hack to cope with Apple shipping a version of Python compiled
    with the -mno-fused-madd argument which clang from XCode 5.1 does not
    support::

        $ cc -v
        Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
        Target: x86_64-apple-darwin13.2.0
        Thread model: posix

        $ which python-config
        /Library/Frameworks/Python.framework/Versions/Current/bin/python-config

        $ python-config --cflags
        -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5
        -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5
        -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk
        -fno-strict-aliasing -Wno-long-double -no-cpp-precomp -mno-fused-madd
        -fno-common -dynamic -DNDEBUG -g -O3

    We can avoid the clang compilation error with -Qunused-arguments which is
    (currently) harmless if gcc is being used instead (e.g. compiling Biopython
    against a locally compiled Python rather than the Apple provided Python).
    """
    # see http://lists.open-bio.org/pipermail/biopython-dev/2014-April/011240.html
    if sys.platform != "darwin":
        return
    # see also Bio/_py3k/__init__.py (which we can't use in setup.py)
    if sys.version_info[0] >= 3:
        from subprocess import getoutput
    else:
        from commands import getoutput
    cc = getoutput("cc -v")
    if "gcc" in cc or "clang" not in cc:
        return
    for flag in ["CFLAGS", "CPPFLAGS"]:
        if flag not in os.environ:
            os.environ[flag] = "-Qunused-arguments"
        elif "-Qunused-arguments" not in os.environ[flag]:
            os.environ[flag] += " -Qunused-arguments"

osx_clang_fix()

def split_args(s):
    import re
    return re.split("\s+", s.strip())

def get_root():
    try:
        return sys.argv[sys.argv.index("--root") + 1]
    except ValueError:
        return ""

def is_system_wide_install():
    return os.access(get_python_lib(), os.W_OK)


def builddir_is_srcdir():
    return abspath("@top_srcdir@") == abspath("@top_builddir@")

def pre_install():
    if not is_system_wide_install():
        sys.argv.extend(["--prefix", "@prefix@"])

def pre_build():
    if not builddir_is_srcdir():
        for file in FILES_TO_BE_COPIED:
            src = "@top_srcdir@/interfaces/Python/" + file
            dst = "@top_builddir@/interfaces/Python/" + file
            if not exists(dst):
                shutil.copy(src, dst)

def pre_clean():
    if not builddir_is_srcdir():
        for file in FILES_TO_BE_COPIED:
            exists(file) and os.remove(file)


def uninstall():
    if is_system_wide_install():
        prefix = None
    else:
        prefix = "@prefix@"

    for f in "RNA/__init__.py", "RNA/__init__.pyc", "_RNA.so":
        file = get_root() + "/" + get_python_lib(prefix=prefix) + "/" + f
        exists(file) and os.remove(file)

        file = get_root() + "/" + get_python_lib(plat_specific=True, prefix=prefix) + "/" + f
        exists(file) and os.remove(file)

    sys.exit(0)

commands = {
    "install": pre_install,
    "build": pre_build,
    "clean": pre_clean,
    "uninstall": uninstall,
    }

if len(sys.argv) > 1 and commands.has_key(sys.argv[1]):
    commands[sys.argv[1]]()


old_filename = "RNA.py"
new_filename = "__init__.py"
if os.path.exists(old_filename):
    os.rename(old_filename, new_filename)
 
extra_link_args = ['@OPENMP_CFLAGS@', '-lstdc++']
extra_compile_args=['@OPENMP_CFLAGS@']

if sys.platform != 'darwin':
    extra_link_args.append('-s')
 
extension = Extension("_RNA",
                      ["RNA_wrap.c"],
                      include_dirs=['@top_srcdir@/src'],
                      libraries=['RNA'],
                      library_dirs=['@top_builddir@/src/ViennaRNA'],
                      extra_compile_args=extra_compile_args,
                      extra_link_args=extra_link_args
                      )
 
setup(name="RNA",
      version="@PACKAGE_VERSION@",
      description="@PACKAGE_NAME@",
      author="Ivo Hofacker, Institute for Theoretical Chemistry, University of Vienna",
      url="@PACKAGE_URL@",
      package_dir = {'RNA':'@top_srcdir@/interfaces/Python'},
      packages = ['RNA'],
      ext_modules=[extension],
      )
