/**

@fn char *vrna_pbacktrack5(vrna_fold_compound_t *fc, int length)
@scripting
@parblock
This function is attached as overloaded method @b pbacktrack() to objects of type @em fold_compound
@endparblock

@fn char *vrna_pbacktrack(vrna_fold_compound_t *fc)
@scripting
@parblock
This function is attached as overloaded method @b pbacktrack() to objects of type @em fold_compound
that accepts an optional @p length argument. Hence, it serves as a replacement for vrna_pbacktrack5().
@endparblock

@fn char *vrna_pbacktrack_nr(vrna_fold_compound_t *fc, int num_samples)
@scripting
@parblock
This function is attached as method @b pbacktrack_nr() to objects of type @em fold_compound.
@endparblock

@fn char **vrna_pbacktrack_nr_resume(vrna_fold_compound_t *fc, unsigned int num_samples, vrna_nr_memory_t *nr_mem)
@scripting
@parblock
This function is attached as method @b pbacktrack_nr_resume() to objects of type @em fold_compound.
In addition to the list of structures, this function also returns the @p nr_mem data structure as
first element. In Python, for instance, a successive call might look like:
@code{.py}
nr_mem = None

# Obtain first 100 samples
nr_mem, structure_list = fc.pbacktrack_nr_resume(100, nr_mem)

# Obtain another 500 samples
nr_mem, structure_list = fc.pbacktrack_nr_resume(500, nr_mem)
@endcode
@endparblock
*/
